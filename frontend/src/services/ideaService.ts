import axios from 'axios';

const API_URL = '/api/ideas';

// Types
interface Idea {
  id: string;
  title: string;
  content: string;
  type: 'blog' | 'video' | 'social';
  keywords: string[];
  createdAt: string;
  isSaved: boolean;
}

// This is a placeholder service for idea generation and management
// It will be replaced with actual API calls in the implementation

const generateIdeas = async (prompt: string, type: 'blog' | 'video' | 'social', count: number) => {
  try {
    // Simulate API call
    // In real implementation, this would be:
    // const response = await axios.post(`${API_URL}/generate`, { prompt, type, count });
    // return response.data;
    
    // Mock response for demonstration
    // In a real implementation, the AI would generate these based on the prompt
    const mockIdeas: Idea[] = [];
    
    for (let i = 0; i < count; i++) {
      mockIdeas.push({
        id: `idea-${Date.now()}-${i}`,
        title: `${type.charAt(0).toUpperCase() + type.slice(1)} Idea ${i + 1} about ${prompt}`,
        content: `This is a sample ${type} idea related to ${prompt}. In a real implementation, this would be generated by an AI model.`,
        type: type,
        keywords: ['sample', prompt, type],
        createdAt: new Date().toISOString(),
        isSaved: false
      });
    }
    
    return mockIdeas;
  } catch (error) {
    throw new Error('Failed to generate ideas');
  }
};

const saveIdea = async (idea: Idea) => {
  try {
    // Simulate API call
    // In real implementation, this would be:
    // const response = await axios.post(`${API_URL}/save`, idea);
    // return response.data;
    
    // Mock response for demonstration
    return {
      ...idea,
      isSaved: true
    };
  } catch (error) {
    throw new Error('Failed to save idea');
  }
};

const getSavedIdeas = async () => {
  try {
    // Simulate API call
    // In real implementation, this would be:
    // const response = await axios.get(`${API_URL}/saved`);
    // return response.data;
    
    // Mock response for demonstration
    return [
      {
        id: 'saved-idea-1',
        title: 'Sample Saved Blog Idea',
        content: 'This is a sample saved blog idea content.',
        type: 'blog' as const,
        keywords: ['sample', 'blog', 'saved'],
        createdAt: new Date().toISOString(),
        isSaved: true
      },
      {
        id: 'saved-idea-2',
        title: 'Sample Saved Video Idea',
        content: 'This is a sample saved video idea content.',
        type: 'video' as const,
        keywords: ['sample', 'video', 'saved'],
        createdAt: new Date().toISOString(),
        isSaved: true
      }
    ];
  } catch (error) {
    throw new Error('Failed to fetch saved ideas');
  }
};

const ideaService = {
  generateIdeas,
  saveIdea,
  getSavedIdeas
};

export default ideaService;
